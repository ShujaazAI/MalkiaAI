# -*- coding: utf-8 -*-
"""spoon_fork_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hRVivFw_pSwRo13k_VKZJXbwzmpTN8dX
"""

import numpy as np
import matplotlib.pyplot as plt
import os
import tensorflow as tf
from glob import glob
import sys
import sklearn.metrics as metrics
from PIL import Image
import cv2

MODEL_NAME = 'ssd_mobilenet_v1_coco_11_06_2017'
# # # MODEL_NAME = 'ssd_mobilenet_v2_coco_11_06_2017'
# # MODEL_NAME = 'faster_rcnn_inception_resnet_v2_atrous_coco_11_06_2017'
# # Model_new = 'ssd_resnet50_v1_fpn_640x640_coco17_tpu-8'
# # MODEL_FILE = MODEL_NAME + '.tar.gz'
# # DOWNLOAD_BASE = 'http://download.tensorflow.org/models/object_detection/'

# # # Path to frozen detection graph. This is the actual model that is used for the object detection.
model_path = "./"
PATH_TO_CKPT = model_path + MODEL_NAME + '/frozen_inference_graph.pb'

def load_graph():
    detection_graph = tf.Graph()
    with detection_graph.as_default():
        od_graph_def = tf.compat.v1.GraphDef()
        with tf.compat.v2.io.gfile.GFile(PATH_TO_CKPT, 'rb') as fid:
            serialized_graph = fid.read()
            od_graph_def.ParseFromString(serialized_graph)
            tf.import_graph_def(od_graph_def, name='')

    return detection_graph

def select_boxes(boxes, classes, scores, score_threshold=0, target_class=50):
    """

    :param boxes:
    :param classes:
    :param scores:
    :param target_class: default traffic light id in COCO dataset is 10
    :return:
    """

    sq_scores = np.squeeze(scores)
    sq_classes = np.squeeze(classes)
    sq_boxes = np.squeeze(boxes)

    sel_id = np.logical_and(sq_classes == target_class, sq_scores > score_threshold)

    return sq_boxes[sel_id]

class TLClassifier(object):
    def __init__(self):

        self.detection_graph = load_graph()
        self.extract_graph_components()
        self.sess = tf.compat.v1.Session(graph=self.detection_graph)

        # dummy session
        dummy_image = np.zeros((100, 100, 3))
        self.detect_multi_object(dummy_image,0.1)
        self.traffic_light_box = None
        self.classified_index = 0

    def extract_graph_components(self):
        # Definite input and output Tensors for detection_graph
        self.image_tensor = self.detection_graph.get_tensor_by_name('image_tensor:0')
        # Each box represents a part of the image where a particular object was detected.
        self.detection_boxes = self.detection_graph.get_tensor_by_name('detection_boxes:0')
        # Each score represent how level of confidence for each of the objects.
        # Score is shown on the result image, together with the class label.
        self.detection_scores = self.detection_graph.get_tensor_by_name('detection_scores:0')
        self.detection_classes = self.detection_graph.get_tensor_by_name('detection_classes:0')
        self.num_detections = self.detection_graph.get_tensor_by_name('num_detections:0')
    
    def detect_multi_object(self, image_np, score_threshold):
        """
        Return detection boxes in a image

        :param image_np:
        :param score_threshold:
        :return:
        """

        # Expand dimensions since the model expects images to have shape: [1, None, None, 3]
        image_np_expanded = np.expand_dims(image_np, axis=0)
        # Actual detection.

        (boxes, scores, classes, num) = self.sess.run(
            [self.detection_boxes, self.detection_scores, self.detection_classes, self.num_detections],
            feed_dict={self.image_tensor: image_np_expanded})

        sel_boxes = select_boxes(boxes=boxes, classes=classes, scores=scores,
                                 score_threshold=score_threshold, target_class=50)

        return sel_boxes

tlc=TLClassifier()

def get_annots(image_np, sel_box):
    annots_temp = []
    im_height, im_width, _ = image_np.shape
    (left, right, top, bottom) = (sel_box[1] * im_width, sel_box[3] * im_width,
                                  sel_box[0] * im_height, sel_box[2] * im_height)
    annots_temp.extend((left, top,right,  bottom))
    
    return annots_temp

def crop_roi_image(image_np, sel_box):
    im_height, im_width, _ = image_np.shape
    (left, right, top, bottom) = (sel_box[1] * im_width, sel_box[3] * im_width,
                                  sel_box[0] * im_height, sel_box[2] * im_height)
    cropped_image = image_np[int(top):int(bottom), int(left):int(right), :]
    return cropped_image

def final_detection(image_np, frame):
    boxes = tlc.detect_multi_object(image_np, score_threshold=0.2)
    annotations = []
    for box in boxes:
        temp_annots = get_annots(image_np, box)
        annotations.append(temp_annots)

    color_space = [(0,255,0),(255,0,0),(255,0,0)]
    # frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    #print("Found {} annotations:".format(len(annotations)))
    i = 0
    for anno in annotations:
        anno_class = 'spoon'
        i += 1
        anno_left = int(anno[0])
        anno_top = int(anno[1])
        anno_right = int(anno[2])
        anno_bot = int(anno[3])
        print("\tClass: '{}' at [{},{},{},{}]".format(anno_class, anno_left, anno_top, anno_right, anno_bot))
        if anno_class == "spoon":
            color_class = color_space[0]
        cv2.rectangle(frame, (anno_left, anno_top), (anno_right, anno_bot), color_class, 5)
    return frame

#         plt.rcParams['figure.figsize'] = [14, 10]
#   plt.grid(b=None)
#   plt.imshow(img)
#   plt.grid(b=None) 
#   plt.show()

# test_file = "/content/spoon.jpeg"
# im = Image.open(test_file)
# image_np = np.asarray(im)
# plt.grid(b=None)   
# final_detection(image_np)

cap = cv2.VideoCapture(0)
if cap.isOpened():
    while True:
        ret, frame = cap.read()
        image_np = np.asarray(frame)  
        frame = final_detection(image_np, frame)
        cv2.imshow('Detect', frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()